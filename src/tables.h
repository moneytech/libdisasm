/******************************************************************************
 *  Tables (opcodes and other...)
 * this is part of the libdisasm project
 *
 * author: Dmitry Podgorny <pasis.ua@gmail.com>
 * version: alpha5
 * license: GPL
 *****************************************************************************/

#ifndef TABLES_H
#define TABLES_H

#include "core.h"
#include "codes.h"

const struct opcode	opcodes[] = {
	{ 0x00	, D_MODRM	, "add    {r/m8}, {r8}"		},
	{ 0x01	, D_MODRM	, "add    {r/m32}, {r32}"	},
	{ 0x02	, D_MODRM	, "add    {r8}, {r/m8}"		},
	{ 0x03	, D_MODRM	, "add    {r32}, {r/m32}"	},
	{ 0x04	, D_IB		, "add    al, {imm8}"		},
	{ 0x05	, D_ID		, "add    eax, {imm32}"		},
	{ 0x6605, D_ID		, "add    ax, {imm32}"		}, // это выглядит как "add ax, {imm16}"
	{ 0x06	, 0		, "push   es"			},
	{ 0x07	, 0		, "pop    es"			},
	{ 0x08	, D_MODRM	, "or     {r/m8}, {r8}"		},
	{ 0x09	, D_MODRM	, "or     {r/m32}, {r32}"	},
	{ 0x0a	, D_MODRM	, "or     {r8}, {r/m8}"		},
	{ 0x0b	, D_MODRM	, "or     {r32}, {r/m32}"	},
	{ 0x0c	, D_IB		, "or     al, {imm8}"		},
	{ 0x0d	, D_ID		, "or     eax, {imm32}"		},
	{ 0x660d, D_ID		, "or     ax, {imm32}"		}, // это выглядит как "or ax, {imm16}"
	{ 0x0e	, 0		, "push   cs"			},
	{ 0x10	, D_MODRM	, "adc    {r/m8}, {r8}"		},
	{ 0x11	, D_MODRM	, "adc    {r/m32}, {r32}"	},
	{ 0x12	, D_MODRM	, "adc    {r8}, {r/m8}"		},
	{ 0x13	, D_MODRM	, "adc    {r32}, {r/m32}"	},
	{ 0x14	, D_IB		, "adc    al, {imm8}"		},
	{ 0x15	, D_ID		, "adc    eax, {imm32}"		},
	{ 0x6615, D_ID		, "adc    ax, {imm32}"		}, // это выглядит как "adc ax, {imm16}"
	{ 0x16	, 0		, "push   ss"			},
	{ 0x17	, 0		, "pop    ss"			},
	{ 0x18	, D_MODRM	, "sbb    {r/m8}, {r8}"		},
	{ 0x19	, D_MODRM	, "sbb    {r/m32}, {r32}"	},
	{ 0x1a	, D_MODRM	, "sbb    {r8}, {r/m8}"		},
	{ 0x1b	, D_MODRM	, "sbb    {r32}, {r/m32}"	},
	{ 0x1c	, D_IB		, "sbb    al, {imm8}"		},
	{ 0x1d	, D_ID		, "sbb    eax, {imm32}"		},
	{ 0x661d, D_ID		, "sbb    ax, {imm32}"		}, // это выглядит как "sbb ax, {imm16}"
	{ 0x1e	, 0		, "push   ds"			},
	{ 0x1f	, 0		, "pop    ds"			},
	{ 0x20	, D_MODRM	, "and    {r/m8}, {r8}"		},
	{ 0x21	, D_MODRM	, "and    {r/m32}, {r32}"	},
	{ 0x22	, D_MODRM	, "and    {r8}, {r/m8}"		},
	{ 0x23	, D_MODRM	, "and    {r32}, {r/m32}"	},
	{ 0x24	, D_IB		, "and    al, {imm8}"		},
	{ 0x25	, D_ID		, "and    eax, {imm32}"		},
	{ 0x6625, D_ID		, "and    ax, {imm32}"		}, // это выглядит как "and ax, {imm16}"
	{ 0x27	, 0		, "daa"				},
	{ 0x28	, D_MODRM	, "sub    {r/m8}, {r8}"		},
	{ 0x29	, D_MODRM	, "sub    {r/m32}, {r32}"	},
	{ 0x2a	, D_MODRM	, "sub    {r8}, {r/m8}"		},
	{ 0x2b	, D_MODRM	, "sub    {r32}, {r/m32}"	},
	{ 0x2c	, D_IB		, "sub    al, {imm8}"		},
	{ 0x2d	, D_ID		, "sub    eax, {imm32}"		},
	{ 0x662d, D_ID		, "sub    ax, {imm32}"		}, // это выглядит как "sub ax, {imm16}"
	{ 0x2f	, 0		, "das"				},
	{ 0x30	, D_MODRM	, "xor    {r/m8}, {r8}"		},
	{ 0x31	, D_MODRM	, "xor    {r/m32}, {r32}"	},
	{ 0x32	, D_MODRM	, "xor    {r8}, {r/m8}"		},
	{ 0x33	, D_MODRM	, "xor    {r32}, {r/m32}"	},
	{ 0x34	, D_IB		, "xor    al, {imm8}"		},
	{ 0x35	, D_ID		, "xor    eax, {imm32}"		},
	{ 0x6635, D_ID		, "xor    ax, {imm32}"		}, // это выглядит как "xor ax, {imm16}"
	{ 0x37	, 0		, "aaa"				},
	{ 0x38	, D_MODRM	, "cmp    {r/m8}, {r8}"		},
	{ 0x39	, D_MODRM	, "cmp    {r/m32}, {r32}"	},
	{ 0x3a	, D_MODRM	, "cmp    {r8}, {r/m8}"		},
	{ 0x3b	, D_MODRM	, "cmp    {r32}, {r/m32}"	},
	{ 0x3c	, D_IB		, "cmp    al, {imm8}"		},
	{ 0x3d	, D_ID		, "cmp    eax, {imm32}"		},
	{ 0x663d, D_ID		, "cmp    ax, {imm32}"		}, // это выглядит как "cmp ax, {imm16}"
	{ 0x3f	, 0		, "aas"				},
	{ 0x40	, D_RD		, "inc    {r32}"		},
	{ 0x48	, D_RD		, "dec    {r32}"		},
	{ 0x50	, D_RD		, "push   {r32}"		},
	{ 0x58	, D_RD		, "pop    {r32}"		},
	{ 0x60	, 0		, "pushad"			},
	{ 0x6660, 0		, "pusha"			},
	{ 0x61	, 0		, "popad"			},
	{ 0x6661, 0		, "popa"			},
	{ 0x68	, D_ID		, "push   {imm32}"		},
	{ 0x6a	, D_IB		, "push   {imm8}"		},
	{ 0x6c	, 0		, "insb"			},
	{ 0x6d	, 0		, "insd"			},
	{ 0x6e	, 0		, "outsb"			},
	{ 0x6f	, 0		, "outsd"			},
	{ 0x70	, D_CB		, "jo     {rel8}"		},
	{ 0x71	, D_CB		, "jno    {rel8}"		},
	{ 0x72	, D_CB		, "jc     {rel8}"		},
	{ 0x73	, D_CB		, "jnc    {rel8}"		},
	{ 0x74	, D_CB		, "jz     {rel8}"		},
	{ 0x75	, D_CB		, "jnz    {rel8}"		},
	{ 0x76	, D_CB		, "jna    {rel8}"		},
	{ 0x77	, D_CB		, "ja     {rel8}"		},
	{ 0x78	, D_CB		, "js     {rel8}"		},
	{ 0x79	, D_CB		, "jns    {rel8}"		},
	{ 0x7a	, D_CB		, "jp     {rel8}"		},
	{ 0x7b	, D_CB		, "jnp    {rel8}"		},
	{ 0x7c	, D_CB		, "jl     {rel8}"		},
	{ 0x7d	, D_CB		, "jnl    {rel8}"		},
	{ 0x7e	, D_CB		, "jng    {rel8}"		},
	{ 0x7f	, D_CB		, "jg     {rel8}"		},

	{ 0x80  , D_MODRM_RM | D_IB | D_0,
				  "add    {r/m8}, {imm8}"	},
	{ 0x80  , D_MODRM_RM | D_IB | D_1,
				  "or     {r/m8}, {imm8}"	},
	{ 0x80  , D_MODRM_RM | D_IB | D_2,
				  "adc    {r/m8}, {imm8}"	},
	{ 0x80  , D_MODRM_RM | D_IB | D_3,
				  "sbb    {r/m8}, {imm8}"	},
	{ 0x80  , D_MODRM_RM | D_IB | D_4,
				  "and    {r/m8}, {imm8}"	},
	{ 0x80  , D_MODRM_RM | D_IB | D_5,
				  "sub    {r/m8}, {imm8}"	},
	{ 0x80  , D_MODRM_RM | D_IB | D_6,
				  "xor    {r/m8}, {imm8}"	},
	{ 0x80  , D_MODRM_RM | D_IB | D_7,
				  "cmp    {r/m8}, {imm8}"	},

	{ 0x81  , D_MODRM_RM | D_ID | D_0,
				  "add    {r/m32}, {imm32}"	},
	{ 0x81  , D_MODRM_RM | D_ID | D_1,
				  "or     {r/m32}, {imm32}"	},
	{ 0x81  , D_MODRM_RM | D_ID | D_2,
				  "adc    {r/m32}, {imm32}"	},
	{ 0x81  , D_MODRM_RM | D_ID | D_3,
				  "sbb    {r/m32}, {imm32}"	},
	{ 0x81  , D_MODRM_RM | D_ID | D_4,
				  "and    {r/m32}, {imm32}"	},
	{ 0x81  , D_MODRM_RM | D_ID | D_5,
				  "sub    {r/m32}, {imm32}"	},
	{ 0x81  , D_MODRM_RM | D_ID | D_6,
				  "xor    {r/m32}, {imm32}"	},
	{ 0x81  , D_MODRM_RM | D_ID | D_7,
				  "cmp    {r/m32}, {imm32}"	},

	//! нужно согласовать разрядности
	{ 0x83  , D_MODRM_RM | D_IB | D_0,
				  "add    {r/m32}, {imm32}"	},
	{ 0x83  , D_MODRM_RM | D_IB | D_1,
				  "or     {r/m32}, {imm32}"	},
	{ 0x83  , D_MODRM_RM | D_IB | D_2,
				  "adc    {r/m32}, {imm32}"	},
	{ 0x83  , D_MODRM_RM | D_IB | D_3,
				  "sbb    {r/m32}, {imm32}"	},
	{ 0x83  , D_MODRM_RM | D_IB | D_4,
				  "and    {r/m32}, {imm32}"	},
	{ 0x83  , D_MODRM_RM | D_IB | D_5,
				  "sub    {r/m32}, {imm32}"	},
	{ 0x83  , D_MODRM_RM | D_IB | D_6,
				  "xor    {r/m32}, {imm32}"	},
	{ 0x83  , D_MODRM_RM | D_IB | D_7,
				  "cmp    {r/m32}, {imm32}"	},

	{ 0x88	, D_MODRM	, "mov    {r/m8}, {r8}"		},
	{ 0x89	, D_MODRM	, "mov    {r/m32}, {r32}"	},
	{ 0x8a	, D_MODRM	, "mov    {r8}, {r/m8}"		},
	{ 0x8b	, D_MODRM	, "mov    {r32}, {r/m32}"	},
	{ 0x8c	, D_MODRM	, "mov    {r/m16}, {sreg}"	},
	{ 0x8d	, D_MODRM	, "lea    {r32}, {r/m32}"	},
	{ 0x8e	, D_MODRM	, "mov    {sreg}, {r/m16}"	},
	{ 0x8f	, D_MODRM_RM|D_0, "pop    {r/m32}"		},
	{ 0x90	, 0		, "nop"				},
	{ 0x90	, D_RD		, "xchg   eax, {r32}"		},
	{ 0x98	, 0		, "cbw"				},
	{ 0x99	, 0		, "cdq"				},
	{ 0x6699, 0		, "cwd"				},
	{ 0x9a	, D_CP		, "call   {ptr16:32}"		},
	{ 0x9b	, 0		, "fwait"			},
	{ 0x669b, 0		, "wait"			},
	{ 0x9c	, 0		, "pushfd"			},
	{ 0x669c, 0		, "pushf"			},
	{ 0x9d	, 0		, "popfd"			},
	{ 0x669d, 0		, "popf"			},
	{ 0x9e	, 0		, "sahf"			},
	{ 0x9f	, 0		, "lahf"			},
	{ 0xa4	, 0		, "movsb"			},
	{ 0xa5	, 0		, "movsd"			},
	{ 0x66a5, 0		, "movsw"			},
	{ 0xa6	, 0		, "cmpsb"			},
	{ 0xa7	, 0		, "cmpsd"			},
	{ 0x66a7, 0		, "cmpsw"			},
	{ 0xa8	, D_IB		, "test   al, {imm8}"		},
	{ 0xa9	, D_ID		, "test   eax, {imm32}"		},
	{ 0x66a9, D_ID		, "test   ax, {imm32}"		},
	{ 0xaa	, 0		, "stosb"			},
	{ 0xab	, 0		, "stosd"			},
	{ 0x66ab, 0		, "stosw"			},
	{ 0xac	, 0		, "lodsb"			},
	{ 0xad	, 0		, "lodsd"			},
	{ 0x66ad, 0		, "lodsw"			},
	{ 0xae	, 0		, "scasb"			},
	{ 0xaf	, 0		, "scasd"			},
	{ 0x66af, 0		, "scasw"			},
	{ 0xb0	, D_RB | D_IB	, "mov    {r8}, {imm8}"		},
	{ 0xb8	, D_RD | D_ID	, "mov    {r32}, {imm32}"	},

	{ 0xc0  , D_MODRM_RM | D_IB | D_0,
				  "rol    {r/m8}, {imm8}"	},
	{ 0xc0  , D_MODRM_RM | D_IB | D_1,
				  "ror    {r/m8}, {imm8}"	},
	{ 0xc0  , D_MODRM_RM | D_IB | D_2,
				  "rcl    {r/m8}, {imm8}"	},
	{ 0xc0  , D_MODRM_RM | D_IB | D_3,
				  "rcr    {r/m8}, {imm8}"	},
	{ 0xc0  , D_MODRM_RM | D_IB | D_4,
				  "sal    {r/m8}, {imm8}"	},
	{ 0xc0  , D_MODRM_RM | D_IB | D_5,
				  "shr    {r/m8}, {imm8}"	},
	{ 0xc0  , D_MODRM_RM | D_IB | D_6,
				  "shl    {r/m8}, {imm8}"	},
	{ 0xc0  , D_MODRM_RM | D_IB | D_7,
				  "sar    {r/m8}, {imm8}"	},

	{ 0xc1  , D_MODRM_RM | D_IB | D_0,
				  "rol    {r/m32}, {imm8}"	},
	{ 0xc1  , D_MODRM_RM | D_IB | D_1,
				  "ror    {r/m32}, {imm8}"	},
	{ 0xc1  , D_MODRM_RM | D_IB | D_2,
				  "rcl    {r/m32}, {imm8}"	},
	{ 0xc1  , D_MODRM_RM | D_IB | D_3,
				  "rcr    {r/m32}, {imm8}"	},
	{ 0xc1  , D_MODRM_RM | D_IB | D_4,
				  "sal    {r/m32}, {imm8}"	},
	{ 0xc1  , D_MODRM_RM | D_IB | D_5,
				  "shr    {r/m32}, {imm8}"	},
	{ 0xc1  , D_MODRM_RM | D_IB | D_6,
				  "shl    {r/m32}, {imm8}"	},
	{ 0xc1  , D_MODRM_RM | D_IB | D_7,
				  "sar    {r/m32}, {imm8}"	},

	{ 0xc3	, 0		, "ret"				},

	{ 0xc6	, D_MODRM_RM | D_IB | D_0,
				  "mov    {r/m8}, {imm8}"	},
	{ 0xc7	, D_MODRM_RM | D_ID | D_0,
				  "mov    {r/m32}, {imm32}"	},

	{ 0xc9	, 0		, "leave"			},
	{ 0xcb	, 0		, "retf"			},
	{ 0xcc	, 0		, "int3"			},
	{ 0xcd	, D_IB		, "int    {imm8}"		},
	{ 0xce	, 0		, "intO"			},
	{ 0xcf	, 0		, "iretd"			},
	{ 0x66cf, 0		, "iret"			},

	{ 0xd0  , D_MODRM_RM | D_0,
				  "rol    {r/m8}, 1"		},
	{ 0xd0  , D_MODRM_RM | D_1,
				  "ror    {r/m8}, 1"		},
	{ 0xd0  , D_MODRM_RM | D_2,
				  "rcl    {r/m8}, 1"		},
	{ 0xd0  , D_MODRM_RM | D_3,
				  "rcr    {r/m8}, 1"		},
	{ 0xd0  , D_MODRM_RM | D_4,
				  "sal    {r/m8}, 1"		},
	{ 0xd0  , D_MODRM_RM | D_5,
				  "shr    {r/m8}, 1"		},
	{ 0xd0  , D_MODRM_RM | D_6,
				  "shl    {r/m8}, 1"		},
	{ 0xd0  , D_MODRM_RM | D_7,
				  "sar    {r/m8}, 1"		},

	{ 0xd1  , D_MODRM_RM | D_0,
				  "rol    {r/m32}, 1"		},
	{ 0xd1  , D_MODRM_RM | D_1,
				  "ror    {r/m32}, 1"		},
	{ 0xd1  , D_MODRM_RM | D_2,
				  "rcl    {r/m32}, 1"		},
	{ 0xd1  , D_MODRM_RM | D_3,
				  "rcr    {r/m32}, 1"		},
	{ 0xd1  , D_MODRM_RM | D_4,
				  "sal    {r/m32}, 1"		},
	{ 0xd1  , D_MODRM_RM | D_5,
				  "shr    {r/m32}, 1"		},
	{ 0xd1  , D_MODRM_RM | D_6,
				  "shl    {r/m32}, 1"		},
	{ 0xd1  , D_MODRM_RM | D_7,
				  "sar    {r/m32}, 1"		},

	{ 0xd2  , D_MODRM_RM | D_0,
				  "rol    {r/m8}, cl"		},
	{ 0xd2  , D_MODRM_RM | D_1,
				  "ror    {r/m8}, cl"		},
	{ 0xd2  , D_MODRM_RM | D_2,
				  "rcl    {r/m8}, cl"		},
	{ 0xd2  , D_MODRM_RM | D_3,
				  "rcr    {r/m8}, cl"		},
	{ 0xd2  , D_MODRM_RM | D_4,
				  "sal    {r/m8}, cl"		},
	{ 0xd2  , D_MODRM_RM | D_5,
				  "shr    {r/m8}, cl"		},
	{ 0xd2  , D_MODRM_RM | D_6,
				  "shl    {r/m8}, cl"		},
	{ 0xd2  , D_MODRM_RM | D_7,
				  "sar    {r/m8}, cl"		},

	{ 0xd3  , D_MODRM_RM | D_0,
				  "rol    {r/m32}, cl"		},
	{ 0xd3  , D_MODRM_RM | D_1,
				  "ror    {r/m32}, cl"		},
	{ 0xd3  , D_MODRM_RM | D_2,
				  "rcl    {r/m32}, cl"		},
	{ 0xd3  , D_MODRM_RM | D_3,
				  "rcr    {r/m32}, cl"		},
	{ 0xd3  , D_MODRM_RM | D_4,
				  "sal    {r/m32}, cl"		},
	{ 0xd3  , D_MODRM_RM | D_5,
				  "shr    {r/m32}, cl"		},
	{ 0xd3  , D_MODRM_RM | D_6,
				  "shl    {r/m32}, cl"		},
	{ 0xd3  , D_MODRM_RM | D_7,
				  "sar    {r/m32}, cl"		},

	{ 0xd40a, 0		, "aam"				},
	{ 0xd50a, 0		, "aad"				},
	{ 0xd6	, 0		, "salc"			},
	{ 0xd7	, 0		, "xlatb"			},
	{ 0xe0	, D_CB		, "loopnz {rel8}"		},
	{ 0xe1	, D_CB		, "loopz  {rel8}"		},
	{ 0xe2	, D_CB		, "loop   {rel8}"		},
	{ 0xe3	, D_CB		, "jecxz  {rel8}"		},
	{ 0xe4	, D_IB		, "in     al, {imm8}"		},
	{ 0xe5	, D_IB		, "in     eax, {imm8}"		},
	{ 0x66e5, D_IB		, "in     ax, {imm8}"		},
	{ 0xe6	, D_IB		, "out    {imm8}, al"		},
	{ 0xe7	, D_IB		, "out    {imm8}, eax"		},
	{ 0x66e7, D_IB		, "out    {imm8}, ax"		},
	{ 0xe8	, D_CD		, "call   {rel32}"		},
	{ 0xe9	, D_CD		, "jmp    {rel32}"		},
	{ 0xea	, D_CP		, "jmp    {ptr16:32}"		},
	{ 0xeb	, D_CB		, "jmp    {rel8}"		},
	{ 0xec	, 0		, "in     al, dx"		},
	{ 0xed	, 0		, "in     eax, dx"		},
	{ 0x66ed, 0		, "in     ax, dx"		},
	{ 0xee	, 0		, "out    dx, al"		},
	{ 0xef	, 0		, "out    dx, eax"		},
	{ 0x66ef, 0		, "out    dx, ax"		},
	{ 0xf0	, 0		, "lock"			},
	{ 0xf1	, 0		, "int1"			},
	{ 0xf4	, 0		, "hlt"				},
	{ 0xf5	, 0		, "cmc"				},

	{ 0xf6  , D_MODRM_RM | D_IB | D_0,
				  "test   {r/m8}, {imm8}"	},
	{ 0xf6  , D_MODRM_RM | D_2,
				  "not    {r/m8}"		},
	{ 0xf6  , D_MODRM_RM | D_3,
				  "neg    {r/m8}"		},
	{ 0xf6  , D_MODRM_RM | D_4,
				  "mul    {r/m8}"		},
	{ 0xf6  , D_MODRM_RM | D_5,
				  "imul   {r/m8}"		},
	{ 0xf6  , D_MODRM_RM | D_6,
				  "div    {r/m8}"		},
	{ 0xf6  , D_MODRM_RM | D_7,
				  "idiv   {r/m8}"		},

	{ 0xf7  , D_MODRM_RM | D_ID | D_0,
				  "test   {r/m32}, {imm32}"	},
	{ 0xf7  , D_MODRM_RM | D_2,
				  "not    {r/m32}"		},
	{ 0xf7  , D_MODRM_RM | D_3,
				  "neg    {r/m32}"		},
	{ 0xf7  , D_MODRM_RM | D_4,
				  "mul    {r/m32}"		},
	{ 0xf7  , D_MODRM_RM | D_5,
				  "imul   {r/m32}"		},
	{ 0xf7  , D_MODRM_RM | D_6,
				  "div    {r/m32}"		},
	{ 0xf7  , D_MODRM_RM | D_7,
				  "idiv   {r/m32}"		},

	{ 0xf8	, 0		, "clc"				},
	{ 0xf9	, 0		, "stc"				},
	{ 0xfa	, 0		, "cli"				},
	{ 0xfb	, 0		, "sti"				},
	{ 0xfc	, 0		, "cld"				},
	{ 0xfd	, 0		, "std"				},

	{ 0xfe  , D_MODRM_RM | D_0,
				  "inc    {r/m8}"		},
	{ 0xfe  , D_MODRM_RM | D_1,
				  "dec    {r/m8}"		},

	{ 0xff  , D_MODRM_RM | D_0,
				  "inc    {r/m32}"		},
	{ 0xff  , D_MODRM_RM | D_1,
				  "dec    {r/m32}"		},
	{ 0xff  , D_MODRM_RM | D_2,
				  "call   {r/m32}"		},
	{ 0xff  , D_MODRM_RM | D_4,
				  "jmp    {r/m32}"		},
	{ 0xff  , D_MODRM_RM | D_6,
				  "push   {r/m32}"		},

	// rep:
	{ 0xf2a6	, 0	, "repnz  cmpsb"		},
	{ 0xf2a7	, 0	, "repnz  cmpsd"		},
	{ 0xf266a7	, 0	, "repnz  cmpsw"		},
	{ 0xf2ae	, 0	, "repnz  scasb"		},
	{ 0xf2af	, 0	, "repnz  scasd"		},
	{ 0xf266af	, 0	, "repnz  scasw"		},
	{ 0xf36c	, 0	, "rep    insb"			},
	{ 0xf36d	, 0	, "rep    insd"			},
	{ 0xf3666d	, 0	, "rep    insw"			},
	{ 0xf36e	, 0	, "rep    outsb"		},
	{ 0xf36f	, 0	, "rep    outsd"		},
	{ 0xf3666f	, 0	, "rep    outsw"		},
	{ 0xf3a4	, 0	, "rep    movsb"		},
	{ 0xf3a5	, 0	, "rep    movsd"		},
	{ 0xf366a5	, 0	, "rep    movsw"		},
	{ 0xf3a6	, 0	, "repz   cmpsb"		},
	{ 0xf3a7	, 0	, "repz   cmpsd"		},
	{ 0xf366a7	, 0	, "repz   cmpsw"		},
	{ 0xf3aa	, 0	, "rep    stosb"		},
	{ 0xf3ab	, 0	, "rep    stosd"		},
	{ 0xf366ab	, 0	, "rep    stosw"		},
	{ 0xf3ac	, 0	, "rep    lodsb"		},
	{ 0xf3ad	, 0	, "rep    lodsd"		},
	{ 0xf366ad	, 0	, "rep    lodsw"		},
	{ 0xf3ae	, 0	, "repz   scasb"		},
	{ 0xf3af	, 0	, "repz   scasd"		},
	{ 0xf366af	, 0	, "repz   scasw"		},

	// with prefix 0x0f:
	{ 0x0f00, D_MODRM_RM|D_0, "sldt   {r/m32}"		},
	{ 0x0f00, D_MODRM_RM|D_1, "str    {r/m16}"		},
	{ 0x0f00, D_MODRM_RM|D_2, "lldt   {r/m16}"		},
	{ 0x0f00, D_MODRM_RM|D_3, "ltr    {r/m16}"		},
	{ 0x0f00, D_MODRM_RM|D_4, "verr   {r/m16}"		},
	{ 0x0f00, D_MODRM_RM|D_5, "verw   {r/m32}"		},

	{ 0x0f01, D_MODRM_RM|D_4, "smsw   {r/m32}"		},
	{ 0x0f01, D_MODRM_RM|D_6, "lmsw   {r/m16}"		},

	//! lgdt lidt
	{ 0x0f02, D_MODRM	, "lar    {r32}, {r/m32}"	},
	{ 0x0f03, D_MODRM	, "lsl    {r32}, {r/m32}"	},

	{ 0x0f06, 0		, "clts"			},
	{ 0x0f08, 0		, "invd"			},
	{ 0x0f09, 0		, "wbinvd"			},
	{ 0x0f0b, 0		, "ud2"				}, // Undifined Instruction

	{ 0x0f20, D_MODRM	, "mov    {r/m32!}, {cr}"	},
	{ 0x0f21, D_MODRM	, "mov    {r/m32!}, {dr}"	},
	{ 0x0f22, D_MODRM	, "mov    {cr}, {r/m32!}"	},
	{ 0x0f23, D_MODRM	, "mov    {dr}, {r/m32!}"	},

	{ 0x0f30, 0		, "wrmsr"			},
	{ 0x0f31, 0		, "rdtsc"			},
	{ 0x0f32, 0		, "rdmsr"			},
	{ 0x0f33, 0		, "rdpmc"			},

	{ 0x0f40, D_MODRM	, "cmovo  {r32}, {r/m32}"	},
	{ 0x0f41, D_MODRM	, "cmovno {r32}, {r/m32}"	},
	{ 0x0f42, D_MODRM	, "cmovc  {r32}, {r/m32}"	},
	{ 0x0f43, D_MODRM	, "cmovnc {r32}, {r/m32}"	},
	{ 0x0f44, D_MODRM	, "cmovz  {r32}, {r/m32}"	},
	{ 0x0f45, D_MODRM	, "cmovnz {r32}, {r/m32}"	},
	{ 0x0f46, D_MODRM	, "cmovna {r32}, {r/m32}"	},
	{ 0x0f47, D_MODRM	, "cmova  {r32}, {r/m32}"	},
	{ 0x0f48, D_MODRM	, "cmovs  {r32}, {r/m32}"	},
	{ 0x0f49, D_MODRM	, "cmovns {r32}, {r/m32}"	},
	{ 0x0f4a, D_MODRM	, "cmovp  {r32}, {r/m32}"	},
	{ 0x0f4b, D_MODRM	, "cmovnp {r32}, {r/m32}"	},
	{ 0x0f4c, D_MODRM	, "cmovl  {r32}, {r/m32}"	},
	{ 0x0f4d, D_MODRM	, "cmovnl {r32}, {r/m32}"	},
	{ 0x0f4e, D_MODRM	, "cmovng {r32}, {r/m32}"	},
	{ 0x0f4f, D_MODRM	, "cmovg  {r32}, {r/m32}"	},

	{ 0x0f80, D_CD		, "jo     {rel32}"		},
	{ 0x0f81, D_CD		, "jno    {rel32}"		},
	{ 0x0f82, D_CD		, "jc     {rel32}"		},
	{ 0x0f83, D_CD		, "jnc    {rel32}"		},
	{ 0x0f84, D_CD		, "jz     {rel32}"		},
	{ 0x0f85, D_CD		, "jnz    {rel32}"		},
	{ 0x0f86, D_CD		, "jna    {rel32}"		},
	{ 0x0f87, D_CD		, "ja     {rel32}"		},
	{ 0x0f88, D_CD		, "js     {rel32}"		},
	{ 0x0f89, D_CD		, "jns    {rel32}"		},
	{ 0x0f8a, D_CD		, "jp     {rel32}"		},
	{ 0x0f8b, D_CD		, "jnp    {rel32}"		},
	{ 0x0f8c, D_CD		, "jl     {rel32}"		},
	{ 0x0f8d, D_CD		, "jnl    {rel32}"		},
	{ 0x0f8e, D_CD		, "jng    {rel32}"		},
	{ 0x0f8f, D_CD		, "jg     {rel32}"		},

	{ 0x0f90, D_MODRM	, "seto   {r/m8}"		},
	{ 0x0f91, D_MODRM	, "setno  {r/m8}"		},
	{ 0x0f92, D_MODRM	, "setc   {r/m8}"		},
	{ 0x0f93, D_MODRM	, "setnc  {r/m8}"		},
	{ 0x0f94, D_MODRM	, "setz   {r/m8}"		},
	{ 0x0f95, D_MODRM	, "setnz  {r/m8}"		},
	{ 0x0f96, D_MODRM	, "setna  {r/m8}"		},
	{ 0x0f97, D_MODRM	, "seta   {r/m8}"		},
	{ 0x0f98, D_MODRM	, "sets   {r/m8}"		},
	{ 0x0f99, D_MODRM	, "setns  {r/m8}"		},
	{ 0x0f9a, D_MODRM	, "setp   {r/m8}"		},
	{ 0x0f9b, D_MODRM	, "setnp  {r/m8}"		},
	{ 0x0f9c, D_MODRM	, "setl   {r/m8}"		},
	{ 0x0f9d, D_MODRM	, "setnl  {r/m8}"		},
	{ 0x0f9e, D_MODRM	, "setng  {r/m8}"		},
	{ 0x0f9f, D_MODRM	, "setg   {r/m8}"		},

	{ 0x0fa0, 0		, "push   fs"			},
	{ 0x0fa1, 0		, "pop    fs"			},
	{ 0x0fa2, 0		, "cpuid"			},
	{ 0x0fa3, D_MODRM	, "bt     {r/m32}, {r32}"	},
	{ 0x0fa4, D_MODRM | D_IB, "shld   {r/m32}, {r32}, {imm8}"},
	{ 0x0fa5, D_MODRM	, "shld   {r/m32}, {r32}, cl"	},
	{ 0x0fa8, 0		, "push   gs"			},
	{ 0x0fa9, 0		, "pop    gs"			},
	{ 0x0faa, 0		, "rsm"				},
	{ 0x0fab, D_MODRM	, "bts    {r/m32}, {r32}"	},
	{ 0x0fac, D_MODRM | D_IB, "shrd   {r/m32}, {r32}, {imm8}"},
	{ 0x0fad, D_MODRM	, "shrd   {r/m32}, {r32}, cl"	},
	{ 0x0faf, D_MODRM	, "imul   {r32}, {r/m32}"	},
	{ 0x0fb0, D_MODRM	, "cmpxchg {r/m8}, {r8}"	},
	{ 0x0fb1, D_MODRM	, "cmpxchg {r/m32}, {r32}"	},
	{ 0x0fb3, D_MODRM	, "btr    {r/m32}, {r32}"	},
	{ 0x0fb6, D_MODRM	, "movzx  {r32}, {r/m8}"	},
	{ 0x0fb7, D_MODRM	, "movzx  {r32}, {r/m16}"	},
	{ 0x0fba, D_MODRM_RM | D_IB | D_4
				, "bt     {r/m32}, {imm8}"	},
	{ 0x0fba, D_MODRM_RM | D_IB | D_5
				, "bts    {r/m32}, {imm8}"	},
	{ 0x0fba, D_MODRM_RM | D_IB | D_6
				, "btr    {r/m32}, {imm8}"	},
	{ 0x0fba, D_MODRM_RM | D_IB | D_7
				, "btc    {r/m32}, {imm8}"	},
	{ 0x0fbb, D_MODRM	, "btc    {r/m32}, {r32}"	},
	{ 0x0fbc, D_MODRM	, "bsf    {r32}, {r/m32}"	},
	{ 0x0fbd, D_MODRM	, "bsr    {r32}, {r/m32}"	},
	{ 0x0fbe, D_MODRM	, "movsx  {r32}, {r/m8}"	},
	{ 0x0fbf, D_MODRM	, "movsx  {r32}, {r/m16}"	},

	{ 0x0fc0, D_MODRM	, "xadd   {r/m8}, {r8}"		},
	{ 0x0fc1, D_MODRM	, "xadd   {r/m32}, {r32}"	},

	{ 0x00	, 0		, ""				}	//end
};

// чтобы узнать регистр $n, нужно USE8, USE16 или USE32 умножить на 8 и прибавить $n
const char		regs[8*3][4] = {

	"al",  "cl",  "dl",  "bl",  "ah",  "ch",  "dh",  "bh",
	"ax",  "cx",  "dx",  "bx",  "sp",  "bp",  "si",  "di",
	"eax", "ecx", "edx", "ebx", "esp", "ebp", "esi", "edi"

};

const char		regs_seg[9][4] = {
	""/*NULL*/, "es", "cs", "ss", "ds", "fs", "gs", "?s", "?s" /*2 последних зарезервированы*/
};

const char		regs_sib[8*4][8] = {

	"eax",     "ecx",     "edx",     "ebx",     "", "ebp",     "esi",     "edi",
	"eax * 2", "ecx * 2", "edx * 2", "ebx * 2", "", "ebp * 2", "esi * 2", "edi * 2",
	"eax * 4", "ecx * 4", "edx * 4", "ebx * 4", "", "ebp * 4", "esi * 4", "edi * 4",
	"eax * 8", "ecx * 8", "edx * 8", "ebx * 8", "", "ebp * 8", "esi * 8", "edi * 8",

};

const char		mems[4][8] = {
	"byte ", "word ", "dword ", "qword "
};

const char		mem16[8][16] = {
	"bx + si", "bx + di", "bp + si", "bp + di", "si", "di", "bp", "bx",
};

#endif
